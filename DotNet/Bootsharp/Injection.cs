using System.Diagnostics.CodeAnalysis;
using Microsoft.Extensions.DependencyInjection;

namespace Bootsharp;

/// <summary>
/// Extensions for Microsoft's dependency injection framework.
/// </summary>
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)]
public static class Injection
{
    private static readonly Dictionary<Type, (Type, Func<object, object>)> exports = new();
    private static readonly Dictionary<Type, object> imports = new();

    /// <summary>
    /// Adds exported interface type, associated implementation type and instance factory.
    /// used internally by the auto-generated code.
    /// </summary>
    public static void AddExport (Type api, Type impl, Func<object, object> factory) => exports[impl] = (api, factory);

    /// <summary>
    /// Adds imported interface type and associated implementation instance;
    /// used internally by the auto-generated code.
    /// </summary>
    public static void AddImport (Type api, object impl) => imports[api] = impl;

    /// <summary>
    /// Registers JavaScript bindings generated by Bootsharp.
    /// </summary>
    public static IServiceCollection AddBootsharp (this IServiceCollection services)
    {
        foreach (var (impl, (api, factory)) in exports)
            services.AddSingleton(impl, provider => {
                var handler = provider.GetService(api);
                if (handler is null) throw new Error($"Failed to run Bootsharp: '{api}' dependency is not registered.");
                return factory(provider.GetRequiredService(api));
            });
        foreach (var (api, instance) in imports)
            services.AddSingleton(api, instance);
        return services;
    }

    /// <summary>
    /// Initializes exported JavaScript bindings generated by Bootsharp.
    /// </summary>
    public static IServiceProvider RunBootsharp (this IServiceProvider provider)
    {
        foreach (var (impl, _) in exports)
            provider.GetRequiredService(impl);
        return provider;
    }
}
