using System.Reflection;
using Microsoft.Extensions.DependencyInjection;

namespace Bootsharp;

/// <summary>
/// Extensions for Microsoft's dependency injection framework.
/// </summary>
public static class Injection
{
    /// <summary>
    /// Registers JavaScript bindings generated by Bootsharp.
    /// </summary>
    public static IServiceCollection AddBootsharp (this IServiceCollection services)
    {
        var assembly = Assembly.GetCallingAssembly();
        if (assembly.GetCustomAttribute<JSExportAttribute>()?.Types is { } exports)
            foreach (var export in exports)
                services.AddSingleton(GetImplType(assembly, export));
        if (assembly.GetCustomAttribute<JSImportAttribute>()?.Types is { } imports)
            foreach (var import in imports)
                services.AddSingleton(import, GetImplType(assembly, import));
        return services;
    }

    /// <summary>
    /// Builds exported JavaScript bindings generated by Bootsharp.
    /// </summary>
    public static IServiceProvider BuildBootsharp (this IServiceProvider provider)
    {
        var assembly = Assembly.GetCallingAssembly();
        if (assembly.GetCustomAttribute<JSExportAttribute>()?.Types is { } exports)
            foreach (var export in exports)
                BuildImpl(provider, GetImplType(assembly, export));
        return provider;
    }

    private static Type GetImplType (Assembly assembly, Type type)
    {
        var name = $"{type.Name[1..]}.JS{type.Name[1..]}";
        return assembly.GetType(name)!;
    }

    private static void BuildImpl (IServiceProvider provider, Type implType)
    {
        var handlerType = implType.GetConstructors()[0].GetParameters()[0].ParameterType;
        var handler = provider.GetService(handlerType) ??
                      throw new Error($"Failed to build Bootsharp services: '{handlerType.FullName}' dependency is not registered.");
        Activator.CreateInstance(implType, handler);
    }
}
